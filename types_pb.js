/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.exportSymbol('proto.sygma_pb.Album', null, global);
goog.exportSymbol('proto.sygma_pb.AlbumWithUser', null, global);
goog.exportSymbol('proto.sygma_pb.Artist', null, global);
goog.exportSymbol('proto.sygma_pb.Label', null, global);
goog.exportSymbol('proto.sygma_pb.SourceType', null, global);
goog.exportSymbol('proto.sygma_pb.Track', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sygma_pb.Album = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sygma_pb.Album.repeatedFields_, null);
};
goog.inherits(proto.sygma_pb.Album, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sygma_pb.Album.displayName = 'proto.sygma_pb.Album';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sygma_pb.Album.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sygma_pb.Album.prototype.toObject = function(opt_includeInstance) {
  return proto.sygma_pb.Album.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sygma_pb.Album} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sygma_pb.Album.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    tracksList: jspb.Message.toObjectList(msg.getTracksList(),
    proto.sygma_pb.Track.toObject, includeInstance),
    artistsList: jspb.Message.toObjectList(msg.getArtistsList(),
    proto.sygma_pb.Artist.toObject, includeInstance),
    label: (f = msg.getLabel()) && proto.sygma_pb.Label.toObject(includeInstance, f),
    releasedat: (f = msg.getReleasedat()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    artworkurl: jspb.Message.getFieldWithDefault(msg, 7, ""),
    ownerid: jspb.Message.getFieldWithDefault(msg, 8, ""),
    ownername: jspb.Message.getFieldWithDefault(msg, 9, ""),
    info: jspb.Message.getFieldWithDefault(msg, 10, ""),
    sourcetype: jspb.Message.getFieldWithDefault(msg, 11, 0),
    sourceurl: jspb.Message.getFieldWithDefault(msg, 12, ""),
    genre: jspb.Message.getFieldWithDefault(msg, 13, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sygma_pb.Album}
 */
proto.sygma_pb.Album.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sygma_pb.Album;
  return proto.sygma_pb.Album.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sygma_pb.Album} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sygma_pb.Album}
 */
proto.sygma_pb.Album.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.sygma_pb.Track;
      reader.readMessage(value,proto.sygma_pb.Track.deserializeBinaryFromReader);
      msg.addTracks(value);
      break;
    case 4:
      var value = new proto.sygma_pb.Artist;
      reader.readMessage(value,proto.sygma_pb.Artist.deserializeBinaryFromReader);
      msg.addArtists(value);
      break;
    case 5:
      var value = new proto.sygma_pb.Label;
      reader.readMessage(value,proto.sygma_pb.Label.deserializeBinaryFromReader);
      msg.setLabel(value);
      break;
    case 6:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setReleasedat(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setArtworkurl(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwnerid(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwnername(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setInfo(value);
      break;
    case 11:
      var value = /** @type {!proto.sygma_pb.SourceType} */ (reader.readEnum());
      msg.setSourcetype(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceurl(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setGenre(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sygma_pb.Album.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sygma_pb.Album.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sygma_pb.Album} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sygma_pb.Album.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTracksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.sygma_pb.Track.serializeBinaryToWriter
    );
  }
  f = message.getArtistsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.sygma_pb.Artist.serializeBinaryToWriter
    );
  }
  f = message.getLabel();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.sygma_pb.Label.serializeBinaryToWriter
    );
  }
  f = message.getReleasedat();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getArtworkurl();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getOwnerid();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getOwnername();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getInfo();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getSourcetype();
  if (f !== 0.0) {
    writer.writeEnum(
      11,
      f
    );
  }
  f = message.getSourceurl();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getGenre();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.sygma_pb.Album.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.sygma_pb.Album.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.sygma_pb.Album.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.sygma_pb.Album.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Track tracks = 3;
 * @return {!Array.<!proto.sygma_pb.Track>}
 */
proto.sygma_pb.Album.prototype.getTracksList = function() {
  return /** @type{!Array.<!proto.sygma_pb.Track>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sygma_pb.Track, 3));
};


/** @param {!Array.<!proto.sygma_pb.Track>} value */
proto.sygma_pb.Album.prototype.setTracksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.sygma_pb.Track=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sygma_pb.Track}
 */
proto.sygma_pb.Album.prototype.addTracks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.sygma_pb.Track, opt_index);
};


proto.sygma_pb.Album.prototype.clearTracksList = function() {
  this.setTracksList([]);
};


/**
 * repeated Artist artists = 4;
 * @return {!Array.<!proto.sygma_pb.Artist>}
 */
proto.sygma_pb.Album.prototype.getArtistsList = function() {
  return /** @type{!Array.<!proto.sygma_pb.Artist>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sygma_pb.Artist, 4));
};


/** @param {!Array.<!proto.sygma_pb.Artist>} value */
proto.sygma_pb.Album.prototype.setArtistsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.sygma_pb.Artist=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sygma_pb.Artist}
 */
proto.sygma_pb.Album.prototype.addArtists = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.sygma_pb.Artist, opt_index);
};


proto.sygma_pb.Album.prototype.clearArtistsList = function() {
  this.setArtistsList([]);
};


/**
 * optional Label label = 5;
 * @return {?proto.sygma_pb.Label}
 */
proto.sygma_pb.Album.prototype.getLabel = function() {
  return /** @type{?proto.sygma_pb.Label} */ (
    jspb.Message.getWrapperField(this, proto.sygma_pb.Label, 5));
};


/** @param {?proto.sygma_pb.Label|undefined} value */
proto.sygma_pb.Album.prototype.setLabel = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.sygma_pb.Album.prototype.clearLabel = function() {
  this.setLabel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.sygma_pb.Album.prototype.hasLabel = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional google.protobuf.Timestamp releasedAt = 6;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.sygma_pb.Album.prototype.getReleasedat = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 6));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.sygma_pb.Album.prototype.setReleasedat = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.sygma_pb.Album.prototype.clearReleasedat = function() {
  this.setReleasedat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.sygma_pb.Album.prototype.hasReleasedat = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string artworkURL = 7;
 * @return {string}
 */
proto.sygma_pb.Album.prototype.getArtworkurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.sygma_pb.Album.prototype.setArtworkurl = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string ownerID = 8;
 * @return {string}
 */
proto.sygma_pb.Album.prototype.getOwnerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.sygma_pb.Album.prototype.setOwnerid = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string ownerName = 9;
 * @return {string}
 */
proto.sygma_pb.Album.prototype.getOwnername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.sygma_pb.Album.prototype.setOwnername = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string info = 10;
 * @return {string}
 */
proto.sygma_pb.Album.prototype.getInfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.sygma_pb.Album.prototype.setInfo = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional SourceType sourceType = 11;
 * @return {!proto.sygma_pb.SourceType}
 */
proto.sygma_pb.Album.prototype.getSourcetype = function() {
  return /** @type {!proto.sygma_pb.SourceType} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {!proto.sygma_pb.SourceType} value */
proto.sygma_pb.Album.prototype.setSourcetype = function(value) {
  jspb.Message.setProto3EnumField(this, 11, value);
};


/**
 * optional string sourceURL = 12;
 * @return {string}
 */
proto.sygma_pb.Album.prototype.getSourceurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.sygma_pb.Album.prototype.setSourceurl = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string genre = 13;
 * @return {string}
 */
proto.sygma_pb.Album.prototype.getGenre = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.sygma_pb.Album.prototype.setGenre = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sygma_pb.AlbumWithUser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sygma_pb.AlbumWithUser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sygma_pb.AlbumWithUser.displayName = 'proto.sygma_pb.AlbumWithUser';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sygma_pb.AlbumWithUser.prototype.toObject = function(opt_includeInstance) {
  return proto.sygma_pb.AlbumWithUser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sygma_pb.AlbumWithUser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sygma_pb.AlbumWithUser.toObject = function(includeInstance, msg) {
  var f, obj = {
    album: (f = msg.getAlbum()) && proto.sygma_pb.Album.toObject(includeInstance, f),
    userid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    username: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sygma_pb.AlbumWithUser}
 */
proto.sygma_pb.AlbumWithUser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sygma_pb.AlbumWithUser;
  return proto.sygma_pb.AlbumWithUser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sygma_pb.AlbumWithUser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sygma_pb.AlbumWithUser}
 */
proto.sygma_pb.AlbumWithUser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sygma_pb.Album;
      reader.readMessage(value,proto.sygma_pb.Album.deserializeBinaryFromReader);
      msg.setAlbum(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sygma_pb.AlbumWithUser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sygma_pb.AlbumWithUser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sygma_pb.AlbumWithUser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sygma_pb.AlbumWithUser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAlbum();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.sygma_pb.Album.serializeBinaryToWriter
    );
  }
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional Album album = 1;
 * @return {?proto.sygma_pb.Album}
 */
proto.sygma_pb.AlbumWithUser.prototype.getAlbum = function() {
  return /** @type{?proto.sygma_pb.Album} */ (
    jspb.Message.getWrapperField(this, proto.sygma_pb.Album, 1));
};


/** @param {?proto.sygma_pb.Album|undefined} value */
proto.sygma_pb.AlbumWithUser.prototype.setAlbum = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.sygma_pb.AlbumWithUser.prototype.clearAlbum = function() {
  this.setAlbum(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.sygma_pb.AlbumWithUser.prototype.hasAlbum = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string userID = 2;
 * @return {string}
 */
proto.sygma_pb.AlbumWithUser.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.sygma_pb.AlbumWithUser.prototype.setUserid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string userName = 3;
 * @return {string}
 */
proto.sygma_pb.AlbumWithUser.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.sygma_pb.AlbumWithUser.prototype.setUsername = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sygma_pb.Track = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sygma_pb.Track.repeatedFields_, null);
};
goog.inherits(proto.sygma_pb.Track, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sygma_pb.Track.displayName = 'proto.sygma_pb.Track';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sygma_pb.Track.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sygma_pb.Track.prototype.toObject = function(opt_includeInstance) {
  return proto.sygma_pb.Track.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sygma_pb.Track} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sygma_pb.Track.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    num: jspb.Message.getFieldWithDefault(msg, 3, 0),
    durationsec: jspb.Message.getFieldWithDefault(msg, 4, 0),
    url: jspb.Message.getFieldWithDefault(msg, 5, ""),
    isrccode: jspb.Message.getFieldWithDefault(msg, 6, ""),
    collaboratorsList: jspb.Message.toObjectList(msg.getCollaboratorsList(),
    proto.sygma_pb.Artist.toObject, includeInstance),
    ownerid: jspb.Message.getFieldWithDefault(msg, 8, ""),
    ownername: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sygma_pb.Track}
 */
proto.sygma_pb.Track.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sygma_pb.Track;
  return proto.sygma_pb.Track.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sygma_pb.Track} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sygma_pb.Track}
 */
proto.sygma_pb.Track.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNum(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDurationsec(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setIsrccode(value);
      break;
    case 7:
      var value = new proto.sygma_pb.Artist;
      reader.readMessage(value,proto.sygma_pb.Artist.deserializeBinaryFromReader);
      msg.addCollaborators(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwnerid(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwnername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sygma_pb.Track.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sygma_pb.Track.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sygma_pb.Track} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sygma_pb.Track.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNum();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getDurationsec();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getIsrccode();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getCollaboratorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.sygma_pb.Artist.serializeBinaryToWriter
    );
  }
  f = message.getOwnerid();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getOwnername();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.sygma_pb.Track.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.sygma_pb.Track.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.sygma_pb.Track.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.sygma_pb.Track.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 num = 3;
 * @return {number}
 */
proto.sygma_pb.Track.prototype.getNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.sygma_pb.Track.prototype.setNum = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 durationSec = 4;
 * @return {number}
 */
proto.sygma_pb.Track.prototype.getDurationsec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.sygma_pb.Track.prototype.setDurationsec = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string url = 5;
 * @return {string}
 */
proto.sygma_pb.Track.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.sygma_pb.Track.prototype.setUrl = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string isrcCode = 6;
 * @return {string}
 */
proto.sygma_pb.Track.prototype.getIsrccode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.sygma_pb.Track.prototype.setIsrccode = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * repeated Artist collaborators = 7;
 * @return {!Array.<!proto.sygma_pb.Artist>}
 */
proto.sygma_pb.Track.prototype.getCollaboratorsList = function() {
  return /** @type{!Array.<!proto.sygma_pb.Artist>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sygma_pb.Artist, 7));
};


/** @param {!Array.<!proto.sygma_pb.Artist>} value */
proto.sygma_pb.Track.prototype.setCollaboratorsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.sygma_pb.Artist=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sygma_pb.Artist}
 */
proto.sygma_pb.Track.prototype.addCollaborators = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.sygma_pb.Artist, opt_index);
};


proto.sygma_pb.Track.prototype.clearCollaboratorsList = function() {
  this.setCollaboratorsList([]);
};


/**
 * optional string ownerID = 8;
 * @return {string}
 */
proto.sygma_pb.Track.prototype.getOwnerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.sygma_pb.Track.prototype.setOwnerid = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string ownerName = 9;
 * @return {string}
 */
proto.sygma_pb.Track.prototype.getOwnername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.sygma_pb.Track.prototype.setOwnername = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sygma_pb.Artist = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sygma_pb.Artist, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sygma_pb.Artist.displayName = 'proto.sygma_pb.Artist';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sygma_pb.Artist.prototype.toObject = function(opt_includeInstance) {
  return proto.sygma_pb.Artist.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sygma_pb.Artist} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sygma_pb.Artist.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    artisturl: jspb.Message.getFieldWithDefault(msg, 3, ""),
    imageurl: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sygma_pb.Artist}
 */
proto.sygma_pb.Artist.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sygma_pb.Artist;
  return proto.sygma_pb.Artist.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sygma_pb.Artist} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sygma_pb.Artist}
 */
proto.sygma_pb.Artist.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setArtisturl(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setImageurl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sygma_pb.Artist.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sygma_pb.Artist.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sygma_pb.Artist} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sygma_pb.Artist.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getArtisturl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getImageurl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.sygma_pb.Artist.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.sygma_pb.Artist.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.sygma_pb.Artist.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.sygma_pb.Artist.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string artistURL = 3;
 * @return {string}
 */
proto.sygma_pb.Artist.prototype.getArtisturl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.sygma_pb.Artist.prototype.setArtisturl = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string imageURL = 4;
 * @return {string}
 */
proto.sygma_pb.Artist.prototype.getImageurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.sygma_pb.Artist.prototype.setImageurl = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sygma_pb.Label = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sygma_pb.Label, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sygma_pb.Label.displayName = 'proto.sygma_pb.Label';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sygma_pb.Label.prototype.toObject = function(opt_includeInstance) {
  return proto.sygma_pb.Label.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sygma_pb.Label} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sygma_pb.Label.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    labelurl: jspb.Message.getFieldWithDefault(msg, 3, ""),
    imageurl: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sygma_pb.Label}
 */
proto.sygma_pb.Label.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sygma_pb.Label;
  return proto.sygma_pb.Label.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sygma_pb.Label} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sygma_pb.Label}
 */
proto.sygma_pb.Label.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabelurl(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setImageurl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sygma_pb.Label.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sygma_pb.Label.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sygma_pb.Label} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sygma_pb.Label.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLabelurl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getImageurl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.sygma_pb.Label.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.sygma_pb.Label.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.sygma_pb.Label.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.sygma_pb.Label.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string labelURL = 3;
 * @return {string}
 */
proto.sygma_pb.Label.prototype.getLabelurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.sygma_pb.Label.prototype.setLabelurl = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string imageURL = 4;
 * @return {string}
 */
proto.sygma_pb.Label.prototype.getImageurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.sygma_pb.Label.prototype.setImageurl = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * @enum {number}
 */
proto.sygma_pb.SourceType = {
  INTERNAL: 0,
  BANDCAMP: 1,
  UNKNOWN: 2
};

goog.object.extend(exports, proto.sygma_pb);
